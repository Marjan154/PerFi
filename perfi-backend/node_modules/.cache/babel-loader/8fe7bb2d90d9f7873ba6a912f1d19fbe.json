{"ast":null,"code":"import _objectSpread from \"/Users/uks/Desktop/PerFi/perfi-backend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createStore, applyMiddleware } from 'redux';\nimport loggerMiddleware from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport axios from 'axios';\nconst initialState = {\n  user: {}\n};\nconst GET_USER = 'GET_USER';\n\nconst gotMe = user => ({\n  type: GET_USER,\n  user\n}); // get user\n\n\nexport const getMe = () => dispatch => {\n  return axios.get('/auth/me').then(res => res.data).then(user => dispatch(gotMe(user))).catch(console.error.bind(console));\n}; // for logging in, beginning session\n\nexport const login = formData => dispatch => {\n  return axios.put('/auth/login', formData).then(res => res.data).then(user => dispatch(gotMe(user))).catch(console.error.bind(console));\n}; // for logging out, ending session\n\nexport const logout = () => dispatch => {\n  return axios.delete('/auth/logout').then(() => dispatch(gotMe(initialState.user))).catch(console.error.bind(console));\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_USER:\n      return _objectSpread({}, state, {\n        user: action.user\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default createStore(reducer, applyMiddleware(thunkMiddleware, loggerMiddleware));","map":{"version":3,"sources":["/Users/uks/Desktop/PerFi/perfi-backend/src/store/index.js"],"names":["createStore","applyMiddleware","loggerMiddleware","thunkMiddleware","axios","initialState","user","GET_USER","gotMe","type","getMe","dispatch","get","then","res","data","catch","console","error","bind","login","formData","put","logout","delete","reducer","state","action"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA,MAAMC,QAAQ,GAAG,UAAjB;;AAEA,MAAMC,KAAK,GAAIF,IAAD,KAAW;AACvBG,EAAAA,IAAI,EAAEF,QADiB;AAEvBD,EAAAA;AAFuB,CAAX,CAAd,C,CAKA;;;AACA,OAAO,MAAMI,KAAK,GAAG,MAAMC,QAAQ,IAAI;AACrC,SAAOP,KAAK,CAACQ,GAAN,CAAU,UAAV,EACJC,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IADZ,EAEJF,IAFI,CAECP,IAAI,IAAIK,QAAQ,CAACH,KAAK,CAACF,IAAD,CAAN,CAFjB,EAGJU,KAHI,CAGEC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,CAHF,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMG,KAAK,GAAIC,QAAD,IAAcV,QAAQ,IAAI;AAC7C,SAAOP,KAAK,CAACkB,GAAN,CAAU,aAAV,EAAyBD,QAAzB,EACJR,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IADZ,EAEJF,IAFI,CAECP,IAAI,IAAIK,QAAQ,CAACH,KAAK,CAACF,IAAD,CAAN,CAFjB,EAGJU,KAHI,CAGEC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,CAHF,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMM,MAAM,GAAG,MAAMZ,QAAQ,IAAI;AACtC,SAAOP,KAAK,CAACoB,MAAN,CAAa,cAAb,EACJX,IADI,CACC,MAAMF,QAAQ,CAACH,KAAK,CAACH,YAAY,CAACC,IAAd,CAAN,CADf,EAEJU,KAFI,CAEEC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,CAFF,CAAP;AAGD,CAJM;;AAMP,MAAMQ,OAAO,GAAG,CAACC,KAAK,GAAGrB,YAAT,EAAuBsB,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAAClB,IAAf;AACE,SAAKF,QAAL;AACE,+BACKmB,KADL;AAEEpB,QAAAA,IAAI,EAAEqB,MAAM,CAACrB;AAFf;;AAIF;AACE,aAAOoB,KAAP;AAPJ;AASD,CAVD;;AAYA,eAAe1B,WAAW,CAACyB,OAAD,EAAUxB,eAAe,CAACE,eAAD,EAAkBD,gBAAlB,CAAzB,CAA1B","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\nimport loggerMiddleware from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport axios from 'axios'\n\nconst initialState = {\n  user: {}\n}\n\nconst GET_USER = 'GET_USER'\n\nconst gotMe = (user) => ({\n  type: GET_USER,\n  user\n})\n\n// get user\nexport const getMe = () => dispatch => {\n  return axios.get('/auth/me')\n    .then(res => res.data)\n    .then(user => dispatch(gotMe(user)))\n    .catch(console.error.bind(console))\n}\n\n// for logging in, beginning session\nexport const login = (formData) => dispatch => {\n  return axios.put('/auth/login', formData)\n    .then(res => res.data)\n    .then(user => dispatch(gotMe(user)))\n    .catch(console.error.bind(console))\n}\n\n// for logging out, ending session\nexport const logout = () => dispatch => {\n  return axios.delete('/auth/logout')\n    .then(() => dispatch(gotMe(initialState.user)))\n    .catch(console.error.bind(console))\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_USER:\n      return {\n        ...state,\n        user: action.user\n      }\n    default:\n      return state\n  }\n}\n\nexport default createStore(reducer, applyMiddleware(thunkMiddleware, loggerMiddleware))\n"]},"metadata":{},"sourceType":"module"}