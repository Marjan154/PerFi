{"ast":null,"code":"// import {createStore, applyMiddleware} from 'redux'\n// import loggerMiddleware from 'redux-logger'\n// import thunkMiddleware from 'redux-thunk'\n// import axios from 'axios'\n// const initialState = {\n//   user: {}\n// }\n// const GET_USER = 'GET_USER'\n// const GET_ACCOUNT = 'GET_ACCOUNT'\n// const gotMe = (user) => ({\n//   type: GET_USER,\n//   user\n// })\n// export const getAccount = () => dispatch => {\n//   return axios.get('http://localhost:3000/auth/account')\n//     .then(res => res.data)\n//     .then(user => dispatch(gotMe(user)))\n//     .catch(console.error.bind(console))\n// }\n// // get user verification\n// export const getMe = () => dispatch => {\n//   return axios.get('http://localhost:3000/auth/me')\n//     .then(res => res.data)\n//     .then(user => dispatch(gotMe(user)))\n//     .catch(console.error.bind(console))\n// }\n// // for logging in, beginning session\n// export const login = (formData) => dispatch => {\n//   return axios.put('http://localhost:3000/auth/login', formData)\n//     .then(res => res.data)\n//     .then(user => dispatch(gotMe(user)))\n//     .catch(console.error.bind(console))\n// }\n// // for logging out, ending session\n// export const logout = () => dispatch => {\n//   return axios.delete('/auth/logout')\n//     .then(() => dispatch(gotMe(initialState.user)))\n//     .catch(console.error.bind(console))\n// }\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_USER:\n//       return {\n//         ...state,\n//         user: action.user\n//       }\n//     case GET_ACCOUNT:\n//       return {\n//         ...state,\n//         user: action.user\n//       }\n//     default:\n//       return state\n//   }\n// }\n// export default createStore(reducer, applyMiddleware(thunkMiddleware, loggerMiddleware))","map":{"version":3,"sources":["/Users/marjanansar/PerFi/perfi-backend/src/components/store/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import {createStore, applyMiddleware} from 'redux'\n// import loggerMiddleware from 'redux-logger'\n// import thunkMiddleware from 'redux-thunk'\n// import axios from 'axios'\n\n// const initialState = {\n//   user: {}\n// }\n\n// const GET_USER = 'GET_USER'\n// const GET_ACCOUNT = 'GET_ACCOUNT'\n\n// const gotMe = (user) => ({\n//   type: GET_USER,\n//   user\n// })\n\n// export const getAccount = () => dispatch => {\n//   return axios.get('http://localhost:3000/auth/account')\n//     .then(res => res.data)\n//     .then(user => dispatch(gotMe(user)))\n//     .catch(console.error.bind(console))\n// }\n\n// // get user verification\n// export const getMe = () => dispatch => {\n//   return axios.get('http://localhost:3000/auth/me')\n//     .then(res => res.data)\n//     .then(user => dispatch(gotMe(user)))\n//     .catch(console.error.bind(console))\n// }\n\n// // for logging in, beginning session\n// export const login = (formData) => dispatch => {\n//   return axios.put('http://localhost:3000/auth/login', formData)\n//     .then(res => res.data)\n//     .then(user => dispatch(gotMe(user)))\n//     .catch(console.error.bind(console))\n// }\n\n// // for logging out, ending session\n// export const logout = () => dispatch => {\n//   return axios.delete('/auth/logout')\n//     .then(() => dispatch(gotMe(initialState.user)))\n//     .catch(console.error.bind(console))\n// }\n\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_USER:\n//       return {\n//         ...state,\n//         user: action.user\n//       }\n//     case GET_ACCOUNT:\n//       return {\n//         ...state,\n//         user: action.user\n//       }\n//     default:\n//       return state\n//   }\n// }\n\n// export default createStore(reducer, applyMiddleware(thunkMiddleware, loggerMiddleware))\n"]},"metadata":{},"sourceType":"module"}